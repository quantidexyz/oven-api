// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client'
import { client as _heyApiClient } from './client.gen'
import type {
  AuthAddressData,
  AuthAddressErrors,
  AuthAddressResponses,
  AuthCallbackData,
  AuthCallbackErrors,
  AuthCallbackResponses,
  AuthLoginData,
  AuthLoginErrors,
  AuthLoginResponses,
  AuthLogoutData,
  AuthLogoutErrors,
  AuthLogoutResponses,
  AuthNonceData,
  AuthNonceErrors,
  AuthNonceResponses,
  AuthVerifyData,
  AuthVerifyErrors,
  AuthVerifyResponses,
  CampaignActiveCampaignsData,
  CampaignActiveCampaignsErrors,
  CampaignActiveCampaignsResponses,
  CampaignData,
  CampaignErrors,
  CampaignResponses,
  CampaignStatusData,
  CampaignStatusErrors,
  CampaignStatusResponses,
  CampaignSubmitData,
  CampaignSubmitErrors,
  CampaignSubmitResponses,
  CampaignVerifyData,
  CampaignVerifyErrors,
  CampaignVerifyResponses,
  HealthHealthData,
  HealthHealthErrors,
  HealthHealthResponses,
  LeaderboardData,
  LeaderboardErrors,
  LeaderboardLeaderboardData,
  LeaderboardLeaderboardErrors,
  LeaderboardLeaderboardResponses,
  LeaderboardLeaderboardsSummaryData,
  LeaderboardLeaderboardsSummaryErrors,
  LeaderboardLeaderboardsSummaryResponses,
  LeaderboardPlatformTopUsersData,
  LeaderboardPlatformTopUsersErrors,
  LeaderboardPlatformTopUsersResponses,
  LeaderboardResponses,
  MeAddExcludedUsernameData,
  MeAddExcludedUsernameErrors,
  MeAddExcludedUsernameResponses,
  MeExcludedUsernamesData,
  MeExcludedUsernamesErrors,
  MeExcludedUsernamesResponses,
  MeLeaderboardPositionData,
  MeLeaderboardPositionErrors,
  MeLeaderboardPositionResponses,
  MeMeData,
  MeMeErrors,
  MeMeResponses,
  MeRemoveExcludedUsernameData,
  MeRemoveExcludedUsernameErrors,
  MeRemoveExcludedUsernameResponses,
  MeUpdateProfileFieldsData,
  MeUpdateProfileFieldsErrors,
  MeUpdateProfileFieldsResponses,
  SmartfeedAddTagData,
  SmartfeedAddTagErrors,
  SmartfeedAddTagResponses,
  SmartfeedRemoveTagData,
  SmartfeedRemoveTagErrors,
  SmartfeedRemoveTagResponses,
  SmartfeedSearchData,
  SmartfeedSearchErrors,
  SmartfeedSearchResponses,
  UserAddressData,
  UserAddressErrors,
  UserAddressResponses,
  UserSyncSmartFollowersData,
  UserSyncSmartFollowersErrors,
  UserSyncSmartFollowersResponses,
  UserUserData,
  UserUserErrors,
  UserUserResponses,
  UserUsersData,
  UserUsersErrors,
  UserUsersResponses,
  UserVerifySignupReferralCodeData,
  UserVerifySignupReferralCodeErrors,
  UserVerifySignupReferralCodeResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const health_health = <ThrowOnError extends boolean = false>(
  options?: Options<HealthHealthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthHealthResponses,
    HealthHealthErrors,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  })
}

export const auth_nonce = <ThrowOnError extends boolean = false>(
  options?: Options<AuthNonceData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthNonceResponses,
    AuthNonceErrors,
    ThrowOnError
  >({
    url: '/auth/nonce',
    ...options,
  })
}

export const auth_verify = <ThrowOnError extends boolean = false>(
  options: Options<AuthVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthVerifyResponses,
    AuthVerifyErrors,
    ThrowOnError
  >({
    url: '/auth/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const auth_address = <ThrowOnError extends boolean = false>(
  options?: Options<AuthAddressData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    AuthAddressResponses,
    AuthAddressErrors,
    ThrowOnError
  >({
    url: '/auth/address',
    ...options,
  })
}

export const auth_login = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLoginData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthLoginResponses,
    AuthLoginErrors,
    ThrowOnError
  >({
    url: '/auth/login',
    ...options,
  })
}

export const auth_callback = <ThrowOnError extends boolean = false>(
  options?: Options<AuthCallbackData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthCallbackResponses,
    AuthCallbackErrors,
    ThrowOnError
  >({
    url: '/auth/callback',
    ...options,
  })
}

export const auth_logout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthLogoutResponses,
    AuthLogoutErrors,
    ThrowOnError
  >({
    url: '/auth/logout',
    ...options,
  })
}

export const me_me = <ThrowOnError extends boolean = false>(
  options?: Options<MeMeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    MeMeResponses,
    MeMeErrors,
    ThrowOnError
  >({
    url: '/me',
    ...options,
  })
}

export const me_excluded_usernames = <ThrowOnError extends boolean = false>(
  options?: Options<MeExcludedUsernamesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    MeExcludedUsernamesResponses,
    MeExcludedUsernamesErrors,
    ThrowOnError
  >({
    url: '/me/excluded-usernames',
    ...options,
  })
}

export const me_add_excluded_username = <ThrowOnError extends boolean = false>(
  options: Options<MeAddExcludedUsernameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    MeAddExcludedUsernameResponses,
    MeAddExcludedUsernameErrors,
    ThrowOnError
  >({
    url: '/me/excluded-usernames',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const me_remove_excluded_username = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MeRemoveExcludedUsernameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    MeRemoveExcludedUsernameResponses,
    MeRemoveExcludedUsernameErrors,
    ThrowOnError
  >({
    url: '/me/excluded-usernames/{username}',
    ...options,
  })
}

export const me_update_profile_fields = <ThrowOnError extends boolean = false>(
  options: Options<MeUpdateProfileFieldsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    MeUpdateProfileFieldsResponses,
    MeUpdateProfileFieldsErrors,
    ThrowOnError
  >({
    url: '/me/profile-fields',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const me_leaderboard_position = <ThrowOnError extends boolean = false>(
  options: Options<MeLeaderboardPositionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    MeLeaderboardPositionResponses,
    MeLeaderboardPositionErrors,
    ThrowOnError
  >({
    url: '/me/leaderboard-position/{token_address}',
    ...options,
  })
}

export const campaign_status = <ThrowOnError extends boolean = false>(
  options: Options<CampaignStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CampaignStatusResponses,
    CampaignStatusErrors,
    ThrowOnError
  >({
    url: '/campaign/status',
    ...options,
  })
}

export const campaign_active_campaigns = <ThrowOnError extends boolean = false>(
  options?: Options<CampaignActiveCampaignsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    CampaignActiveCampaignsResponses,
    CampaignActiveCampaignsErrors,
    ThrowOnError
  >({
    url: '/campaign/active-campaigns',
    ...options,
  })
}

export const campaign_submit = <ThrowOnError extends boolean = false>(
  options: Options<CampaignSubmitData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CampaignSubmitResponses,
    CampaignSubmitErrors,
    ThrowOnError
  >({
    url: '/campaign/submit',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const campaign_verify = <ThrowOnError extends boolean = false>(
  options: Options<CampaignVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CampaignVerifyResponses,
    CampaignVerifyErrors,
    ThrowOnError
  >({
    url: '/campaign/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const campaign = <ThrowOnError extends boolean = false>(
  options: Options<CampaignData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CampaignResponses,
    CampaignErrors,
    ThrowOnError
  >({
    url: '/campaign/{token_address}',
    ...options,
  })
}

export const leaderboard = <ThrowOnError extends boolean = false>(
  options: Options<LeaderboardData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    LeaderboardResponses,
    LeaderboardErrors,
    ThrowOnError
  >({
    url: '/leaderboard',
    ...options,
  })
}

export const leaderboard_leaderboards_summary = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<LeaderboardLeaderboardsSummaryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    LeaderboardLeaderboardsSummaryResponses,
    LeaderboardLeaderboardsSummaryErrors,
    ThrowOnError
  >({
    url: '/leaderboard/summary',
    ...options,
  })
}

export const leaderboard_platform_top_users = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<LeaderboardPlatformTopUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    LeaderboardPlatformTopUsersResponses,
    LeaderboardPlatformTopUsersErrors,
    ThrowOnError
  >({
    url: '/leaderboard/platform-top-users',
    ...options,
  })
}

export const leaderboard_leaderboard = <ThrowOnError extends boolean = false>(
  options: Options<LeaderboardLeaderboardData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    LeaderboardLeaderboardResponses,
    LeaderboardLeaderboardErrors,
    ThrowOnError
  >({
    url: '/leaderboard/{token_address}/{campaign_id}',
    ...options,
  })
}

export const user_user = <ThrowOnError extends boolean = false>(
  options: Options<UserUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    UserUserResponses,
    UserUserErrors,
    ThrowOnError
  >({
    url: '/user/{x_user_id}',
    ...options,
  })
}

export const user_verify_signup_referral_code = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserVerifySignupReferralCodeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UserVerifySignupReferralCodeResponses,
    UserVerifySignupReferralCodeErrors,
    ThrowOnError
  >({
    url: '/user/verify-referral-code/{referral_code}',
    ...options,
  })
}

export const user_address = <ThrowOnError extends boolean = false>(
  options: Options<UserAddressData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    UserAddressResponses,
    UserAddressErrors,
    ThrowOnError
  >({
    url: '/user/address/{referral_code}',
    ...options,
  })
}

export const user_sync_smart_followers = <ThrowOnError extends boolean = false>(
  options: Options<UserSyncSmartFollowersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    UserSyncSmartFollowersResponses,
    UserSyncSmartFollowersErrors,
    ThrowOnError
  >({
    url: '/user/sync-smart-followers/{x_user_id}',
    ...options,
  })
}

export const user_users = <ThrowOnError extends boolean = false>(
  options: Options<UserUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    UserUsersResponses,
    UserUsersErrors,
    ThrowOnError
  >({
    url: '/user/users',
    ...options,
  })
}

export const smartfeed_search = <ThrowOnError extends boolean = false>(
  options: Options<SmartfeedSearchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SmartfeedSearchResponses,
    SmartfeedSearchErrors,
    ThrowOnError
  >({
    url: '/smartfeed/search',
    ...options,
  })
}

export const smartfeed_add_tag = <ThrowOnError extends boolean = false>(
  options: Options<SmartfeedAddTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SmartfeedAddTagResponses,
    SmartfeedAddTagErrors,
    ThrowOnError
  >({
    url: '/smartfeed/{user_id}/{tweet_id}/tags',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const smartfeed_remove_tag = <ThrowOnError extends boolean = false>(
  options: Options<SmartfeedRemoveTagData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    SmartfeedRemoveTagResponses,
    SmartfeedRemoveTagErrors,
    ThrowOnError
  >({
    url: '/smartfeed/{user_id}/{tweet_id}/tags/{tag}',
    ...options,
  })
}
